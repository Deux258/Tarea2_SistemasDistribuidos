#version: "3.8"

networks:
  redisn:
    driver: bridge
  trafico-network:
    driver: bridge

services:
  # Servicio para el recolector de datos de Waze
  waze-data-collector:
    build: ./waze-data-collector
    container_name: waze-data-collector
    networks:
      - redisn
      - trafico-network
    volumes:
      - ./waze-data-collector:/app
    depends_on:
      - mongo
    restart: "no"  # No reiniciar automáticamente, solo ejecutar una vez

  # Servicio para MongoDB
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    volumes:
      - mongo_data:/data/db
    networks:
      - redisn

  mongo-exporter:
    build: ./mongo-exporter
    container_name: mongo_exporter
    networks:
      - redisn
    depends_on:
      - mongo
    volumes:
      - ./data:/data
    environment:
      - MONGO_HOST=mongo
      - MONGO_DB=waze_db
      - MONGO_COLLECTION=alertas
      - MONGO_USER=admin
      - MONGO_PASS=admin

  # Servicio para la interfaz de administración de MongoDB
  mongo-express:
    image: mongo-express:latest
    container_name: mongo_express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_SERVER: mongo
    networks:
      - redisn
    depends_on:
      - mongo
      - waze-data-collector

  # Servicio para Redis
  redis:
    image: bitnami/redis:latest
    restart: always
    container_name: redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_EXTRA_FLAGS=--maxmemory 2mb --maxmemory-policy allkeys-random
    ports:
      - "6379:6379"
    volumes:
      - redis_data_1:/bitnami/redis/data
    networks:
      - redisn
    

  # Filtro con Pig
  pig-filter:
    build: ./pig-filter
    container_name: pig-filter
    volumes:
      - ./data-storage/data:/data
      - ./pig-filter:/scripts
    depends_on:
      - mongo
    networks:
      - redisn


  # Servicio para la interfaz de administración de Redis
  redis-admin:
    image: redislabs/redisinsight:latest
    restart: always
    container_name: redis-admin
    volumes:
      - redis-insight:/data
    ports:
      - "5540:5540"
    networks:
      - redisn
    depends_on:
      - redis

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - trafico-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - trafico-network

  # Importador de datos a Elasticsearch (se ejecuta después del scraper)
  elastic:
    build:
      context: ./elastic
      dockerfile: Dockerfile
    container_name: waze-elastic
    volumes:
      - ./elastic:/app/elastic
    networks:
      - trafico-network
      - redisn
    depends_on:
      - elasticsearch
      - kibana
      - mongo
      - waze-data-collector  # Importante: espera a que termine el scraper
    restart: "no"  # Solo ejecutar una vez después del scraper

  # Servicio para el generador de tráfico
  # traffic-generator:
  #   build: ./traffic-generator
  #   container_name: traffic-generator
  #   depends_on:
  #     - mongo
  #     - redis
  #   networks:
  #     - redisn
  #   restart: always

  # Servicio para el sistema de caché
  query-cache:
    build: ./query-cache
    container_name: query-cache
    restart: "no"
    ports:
      - "5000:5000"
    networks:
      - redisn
    volumes:
      - ./query-cache:/usr/src/app
    depends_on:
      - redis
      - mongo  
      - elastic
        #condition: service_healthy  # Espera a que Elasticsearch esté saludable (o listo)

volumes:
  mongo_data:
    driver: local
  redis_data_1:
    driver: local
  redis-insight:
  esdata:
    driver: local




# docker rm $(docker ps -a -q)

## lista de errores

# redis_cache_waze     | ❌ Error al conectar con MongoDB: Authentication failed., full error: {'ok': 0.0, 'errmsg': 'Authentication failed.', 'code': 18, 'codeName': 'AuthenticationFailed'}
# traffic-generator    | No se pudieron obtener los IDs de eventos.
# traffic-generator exited with code 0


## entrypoint.sh
# #!/bin/bash

# # Esperar a que MongoDB esté disponible
# until mongosh --host mongo -u admin -p admin --eval "print('MongoDB is up')" > /dev/null 2>&1; do
#     echo "Waiting for MongoDB..."
#     sleep 2
# done

# # Exportar datos de MongoDB a JSON
# echo "Exporting data from MongoDB..."
# mongodump --host mongo -u admin -p admin --db waze --collection eventos --out /data/dump
# mongosh --host mongo -u admin -p admin --eval 'db.eventos.find().toArray()' > /data/eventos_waze.json

# # Ejecutar script Pig
# echo "Running Pig filter script..."
# pig -x local /scripts/filtrar_eventos.pig

# # Mantener el contenedor corriendo
# tail -f /dev/null


## filtrar_eventos.pig
# -- ===================================================================
# -- filtrar_eventos.pig
# -- Script para filtrar eventos Waze según criterios específicos
# -- ===================================================================

# -- Cargar datos desde el archivo JSON exportado de MongoDB
# eventos = LOAD '/data/eventos_waze.json' 
#     USING JsonLoader(
#       'type:chararray,           -- tipo de incidente
#        city:chararray,           -- comuna o ciudad
#        timestamp:long,           -- marca de tiempo
#        street:chararray,         -- calle o ruta
#        severity:int,             -- severidad del incidente
#        reliability:int'          -- confiabilidad del reporte
#     );

# -- Filtrar eventos según criterios:
# -- 1. Severidad > 2 (incidentes importantes)
# -- 2. Confiabilidad > 3 (reportes confiables)
# -- 3. Campos críticos no nulos
# filtrados = FILTER eventos BY 
#     severity > 2 AND 
#     reliability > 3 AND 
#     type IS NOT NULL AND 
#     city IS NOT NULL AND 
#     timestamp IS NOT NULL;

# -- Guardar resultados filtrados
# STORE filtrados INTO '/data/eventos_filtrados' USING PigStorage(',');