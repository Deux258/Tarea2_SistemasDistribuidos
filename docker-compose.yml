version: "3.8"

networks:
  redisn:
    driver: bridge

services:
  # Servicio para el scraper
  map-scraper:
    build: ./map-scraper # El contexto de la construcción para el scraper
    container_name: map_scraper_waze
    networks:
      - redisn
    volumes:
      - ./map-scraper:/app # Asegura que se sincronice el código con el contenedor

  # Servicio para MongoDB
  mongo:
    build: ./bdd # El contexto de la construcción para MongoDB
    container_name: mongo_waze
    ports:
      - "27017:27017"
    volumes:
      - ./map-scraper/alertas.json:/data/map-scraper/alertas.json:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
    networks:
      - redisn
    depends_on:
      - map-scraper # Asegura que el scraper esté listo antes de iniciar MongoDB

  # Servicio para Mongo Express
  mongo-express:
    image: mongo-express
    container_name: mongo_express_waze
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin123
      - ME_CONFIG_MONGODB_SERVER=mongo
    networks:
      - redisn
    depends_on:
      - mongo
      - map-scraper # Asegura que MongoDB esté listo antes de iniciar Mongo Express

  # Servicio para Redis
  redis:
    image: bitnami/redis:latest
    restart: always
    container_name: redis_waze
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_EXTRA_FLAGS=--maxmemory 2mb --maxmemory-policy allkeys-random # Configuración de Redis para limitar el uso de memoria
    ports:
      - "6379:6379"
    volumes:
      - redis_data_1:/bitnami/redis/data # Volumen para persistencia de Redis
    networks:
      - redisn
    depends_on:
      - mongo # Asegura que MongoDB esté listo antes de iniciar Redis
      - map-scraper

  # Servicio para RedisInsight
  redisinsight:
    image: redislabs/redisinsight:latest
    restart: always
    container_name: redisinsight_waze
    volumes:
      - redis-insight:/data
    ports:
      - "5540:5540"
    networks:
      - redisn
    depends_on:
      - redis

  # Servicio para el request handler
  request:
    build: ./request
    container_name: request_waze
    depends_on:
      - map-scraper
      - mongo
      - redis
    networks:
      - redisn
    restart: always

  # Servicio para el cache (Flask)
  redis-cache:
    build: ./redis-cache # El contexto de la construcción para redis-cache (flask)
    container_name: redis_cache_waze
    restart: always
    ports:
      - "5000:5000"
    networks:
      - redisn
    volumes:
      - ./redis-cache:/app # Asegura que el código se sincronice con el contenedor
    depends_on:
      - redis # Asegura que Redis esté listo antes de iniciar el cache
      - mongo # Asegura que MongoDB esté listo antes de iniciar el cache
      - map-scraper # Asegura que el scraper esté listo antes de iniciar el cache

volumes:
  mongo_data: # Volumen persistente para MongoDB
  redis_data_1: # Volumen persistente para Redis
    driver: local
  redis-insight: # Volumen para RedisInsight