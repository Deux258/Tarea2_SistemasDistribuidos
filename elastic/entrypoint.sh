#!/bin/bash

#Caso de emergencia de no ejecutar correctamente el script de sincronizaci√≥n

echo "üöÄ Iniciando importador de datos a Elasticsearch..."

# Esperar a que MongoDB est√© disponible
echo "‚è≥ Esperando que MongoDB est√© disponible..."
until python -c "
import pymongo
try:
    client = pymongo.MongoClient('mongodb://admin:admin@mongo:27017/waze_db?authSource=admin')
    client.admin.command('ping')
    print('MongoDB est√° disponible')
    client.close()
except Exception as e:
    print(f'Error: {e}')
    exit(1)
" 2>/dev/null; do
    echo "‚è≥ MongoDB no est√° listo a√∫n, esperando..."
    sleep 5
done

# Esperar a que Elasticsearch est√© disponible
echo "‚è≥ Esperando que Elasticsearch est√© disponible..."
until python -c "
from elasticsearch import Elasticsearch
try:
    es = Elasticsearch('http://elasticsearch:9200')
    if es.ping():
        print('Elasticsearch est√° disponible')
    else:
        exit(1)
except Exception as e:
    print(f'Error: {e}')
    exit(1)
" 2>/dev/null; do
    echo "‚è≥ Elasticsearch no est√° listo a√∫n, esperando..."
    sleep 5
done

# Verificar si hay datos en MongoDB antes de sincronizar
echo "üîç Verificando datos en MongoDB..."
python -c "
import pymongo
try:
    client = pymongo.MongoClient('mongodb://admin:admin@mongo:27017/waze_db?authSource=admin')
    db = client['waze_db']
    collection = db['eventos']
    count = collection.count_documents({})
    print(f'Encontrados {count} eventos en MongoDB')
    if count == 0:
        print('No hay datos para sincronizar')
        exit(1)
    client.close()
except Exception as e:
    print(f'Error verificando datos: {e}')
    exit(1)
"

if [ $? -eq 0 ]; then
    echo "‚úÖ Datos encontrados, iniciando sincronizaci√≥n..."
    # Ejecutar el script de sincronizaci√≥n
    python waze_elastic.py
else
    echo "‚ö†Ô∏è No hay datos para sincronizar o error al verificar"
    exit 1
fi

echo "üèÅ Proceso de importaci√≥n completado" 